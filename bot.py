import logging
import os
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ ID –ù–ê –°–í–û–ô!
INITIAL_ADMIN_ID = 7727813191

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∞–¥–º–∏–Ω–æ–≤ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ –ë–î)
ADMIN_IDS = set()

# ================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==================

def init_db():
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            first_seen DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS groups (
            chat_id INTEGER PRIMARY KEY,
            title TEXT,
            added_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS command_stats (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            command TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_activity (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            date DATE,
            actions_count INTEGER DEFAULT 1,
            UNIQUE(user_id, date)
        )
    ''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    cursor.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (INITIAL_ADMIN_ID,))
    
    conn.commit()
    conn.close()

def load_admins_from_db():
    global ADMIN_IDS
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM admins')
    ADMIN_IDS = {row[0] for row in cursor.fetchall()}
    conn.close()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∞–¥–º–∏–Ω–æ–≤: {len(ADMIN_IDS)}")

def add_user_to_db(user_id: int):
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO users (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def add_group_to_db(chat_id: int, title: str = ""):
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO groups (chat_id, title) VALUES (?, ?)', (chat_id, title))
    conn.commit()
    conn.close()

def add_admin_to_db(user_id: int):
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO admins (user_id) VALUES (?)', (user_id,))
    conn.commit()
    conn.close()

def log_command_usage(user_id: int, command: str):
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO command_stats (user_id, command) VALUES (?, ?)', (user_id, command))
    conn.commit()
    conn.close()

def log_user_activity(user_id: int):
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    today = datetime.now().date()
    cursor.execute('''
        INSERT OR REPLACE INTO user_activity (user_id, date, actions_count)
        VALUES (?, ?, COALESCE((SELECT actions_count FROM user_activity WHERE user_id = ? AND date = ?), 0) + 1)
    ''', (user_id, today, user_id, today))
    conn.commit()
    conn.close()

def get_all_users():
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = [row[0] for row in cursor.fetchall()]
    conn.close()
    return users

def get_all_groups():
    conn = sqlite3.connect('stats.db')
    cursor = conn.cursor()
    cursor.execute('SELECT chat_id FROM groups')
    groups = [row[0] for row in cursor.fetchall()]
    conn.close()
    return groups

def is_admin(user_id: int):
    return user_id in ADMIN_IDS

# ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user_to_db(user.id)
    log_command_usage(user.id, 'start')
    log_user_activity(user.id)
    
    keyboard = [[KeyboardButton("/start")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        reply_markup=reply_markup
    )
    await show_main_menu(update, user)

async def show_main_menu(update, user=None):
    if user is None:
        user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("üìã –û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", callback_data="menu_about")],
        [InlineKeyboardButton("üíº –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", callback_data="menu_conditions")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="menu_contacts")],
        [InlineKeyboardButton("üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="menu_materials")],
        [InlineKeyboardButton("‚ùì FAQ", callback_data="menu_faq")],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 30 –¥–Ω–µ–π", callback_data="stats_30"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 7 –¥–Ω–µ–π", callback_data="stats_7")
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if hasattr(update, 'message'):
        await update.message.reply_text("üéØ –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=reply_markup)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user

    log_command_usage(user.id, data)
    log_user_activity(user.id)

    try:
        if data == "main_menu":
            await show_main_menu(query, user)
            return

        elif data == "menu_about":
            text = (
                "<b>üöÄ –û –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
                "üî• <a href='https://wincraft.casino/'>Wincraft Casino</a> ‚Äî —ç—Ç–æ –¥–∏–Ω–∞–º–∏—á–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–π—Å—è –±—Ä–µ–Ω–¥, "
                "–∫–æ—Ç–æ—Ä—ã–π –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ —Å—Ç–∞–ª —É–∑–Ω–∞–≤–∞–µ–º—ã–º –∏ –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º —Å—Ä–µ–¥–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É.\n\n"
                "üíé –ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–µ–º —Ç—Ä–µ–Ω–¥–∞–º ‚Äî –º—ã —Å–æ–∑–¥–∞—ë–º –∏—Ö. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –ø–æ–¥ "
                "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –≤–Ω–µ–¥—Ä—è—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—è –≤—ã—Å–æ—á–∞–π—à–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–µ—Ä–≤–∏—Å–∞.\n\n"
                "ü§ù –ö–∞–∂–¥–æ–º—É –ø–∞—Ä—Ç–Ω—ë—Ä—É ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥. –ú—ã –≤–µ—Ä–∏–º, —á—Ç–æ —É—Å–ø–µ—Ö —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –¥–æ–≤–µ—Ä–∏–∏, "
                "–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏ –≥–∏–±–∫–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤—ã —Ä–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏!\n\n"
                "üîó <b>–ù–∞—à–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> https://wincraft.casino/\n"
                "üîó <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b> https://affwin.partners/"
            )
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            await query.edit_message_text(
                text=text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard),
                disable_web_page_preview=True
            )

        elif data == "menu_conditions":
            text = "<b>üíº –£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:"
            keyboard = [
                [InlineKeyboardButton("üí∞ CPA", callback_data="conditions_cpa")],
                [InlineKeyboardButton("üìä RS", callback_data="conditions_rs")],
                [InlineKeyboardButton("üîÑ Hybrid", callback_data="conditions_hybrid")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "conditions_cpa":
            text = ("<b>üí∞ –ú–æ–¥–µ–ª—å CPA (Cost Per Action)</b>\n\n"
                    "‚úÖ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
                    "‚Ä¢ –û–ø–ª–∞—Ç–∞ –∑–∞ —Ü–µ–ª–µ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n"
                    "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞\n"
                    "‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö\n"
                    "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥\n\n"
                    "üíµ <b>–°—Ç–∞–≤–∫–∏ –ø–æ FB –Ω–∞—à–∏–º –æ—Å–Ω–æ–≤–Ω—ã–º –≥–µ–æ:</b>\n"
                    "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
                    "‚îÇ   –¢–∏—Ä      ‚îÇ     –°—Ç—Ä–∞–Ω–∞       ‚îÇ –°—Ç–∞–≤–∫–∞‚îÇ\n"
                    "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
                    "‚îÇ    T1      ‚îÇ FI (Finland)     ‚îÇ  170  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ CH (Switzerland) ‚îÇ  295  ‚îÇ\n"
                    "‚îÇ    T3      ‚îÇ KG (Kyrgyzstan)  ‚îÇ  60   ‚îÇ\n"
                    "‚îÇ    T3      ‚îÇ AM (Armenia)     ‚îÇ  60   ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ HU (Hungary)     ‚îÇ  160  ‚îÇ\n"
                    "‚îÇ    T3      ‚îÇ GE (Georgia)     ‚îÇ  80   ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ PL (Poland)      ‚îÇ  150  ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ RS (Serbia)      ‚îÇ  75   ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ CA (Canada)      ‚îÇ  220  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ IE (Ireland)     ‚îÇ  255  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ DE (Germany)     ‚îÇ  220  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ SE (Sweden)      ‚îÇ  215  ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ SI (Slovenia)    ‚îÇ  130  ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ SK (Slovakia)    ‚îÇ  130  ‚îÇ\n"
                    "‚îÇ    T3      ‚îÇ TJ (Tajikistan)  ‚îÇ  65   ‚îÇ\n"
                    "‚îÇ    T3      ‚îÇ MD (Moldova)     ‚îÇ  60   ‚îÇ\n"
                    "‚îÇ    T2      ‚îÇ GR (Greece)      ‚îÇ  150  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ GB (UK)          ‚îÇ  225  ‚îÇ\n"
                    "‚îÇ    T1      ‚îÇ FR (France)      ‚îÇ  185  ‚îÇ\n"
                    "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"
                    "üìä <b>–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ç–∞–≤–æ–∫:</b>\n"
                    "https://docs.google.com/spreadsheets/d/1ObMQlGiY7PbxA0ZdQkZRjXvpbp5clpM4wA2X5CUvl5A/edit?usp=sharing\n\n"
                    "üí¨ <b>–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ</b>")
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª–æ–≤–∏—è–º", callback_data="menu_conditions")]]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "conditions_rs":
            text = ("<b>üìä –ú–æ–¥–µ–ª—å RS (Revenue Share)</b>\n\n"
                    "‚ú® <b>–ü—Ä–µ–º–∏—É–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤</b>\n\n"
                    "‚úÖ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
                    "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±–æ—Ä–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞\n"
                    "‚Ä¢ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–æ—Ö–æ–¥–∞\n"
                    "‚Ä¢ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ\n"
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n\n"
                    "üåü <b>–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
                    "‚Ä¢ –ì–∏–±–∫–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏\n"
                    "‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
                    "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                    "üë• <b>–û–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
                    "‚Ä¢ @makswincraft üöÄ\n"
                    "‚Ä¢ @dosiTG üíº\n"
                    "‚Ä¢ @hugewinaffs üåü\n\n"
                    "<i>–ü—Ä–∏–º–µ—Ä: –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫, LTV –∫–ª–∏–µ–Ω—Ç–∞</i>")
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @makswincraft", url="tg://resolve?domain=makswincraft")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @dosiTG", url="tg://resolve?domain=dosiTG")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @hugewinaffs", url="tg://resolve?domain=hugewinaffs")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª–æ–≤–∏—è–º", callback_data="menu_conditions")]
            ]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "conditions_hybrid":
            text = ("<b>üîÑ –ì–∏–±—Ä–∏–¥–Ω–∞—è –º–æ–¥–µ–ª—å (CPA + RS)</b>\n\n"
                    "üéØ <b>–ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                    "‚úÖ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
                    "‚Ä¢ –°–æ—á–µ—Ç–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ CPA –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ RS\n"
                    "‚Ä¢ –ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è –ø–æ–¥ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏\n"
                    "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
                    "‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫/–¥–æ—Ö–æ–¥\n\n"
                    "üí´ <b>–í–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</b>\n"
                    "‚Ä¢ CPA + –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –æ–±–æ—Ä–æ—Ç–∞\n"
                    "‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ\n"
                    "‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π\n\n"
                    "üë• <b>–û–±—Å—É–¥–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:</b>\n"
                    "‚Ä¢ @makswincraft üöÄ\n"
                    "‚Ä¢ @dosiTG üíº\n"
                    "‚Ä¢ @hugewinaffs üåü\n\n"
                    "<i>–ü—Ä–∏–º–µ—Ä: —Ñ–∏–∫—Å –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é + % –æ—Ç –æ–±–æ—Ä–æ—Ç–∞, —Å—Ç—É–ø–µ–Ω—á–∞—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞</i>")
            keyboard = [
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @makswincraft", url="tg://resolve?domain=makswincraft")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @dosiTG", url="tg://resolve?domain=dosiTG")],
                [InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å @hugewinaffs", url="tg://resolve?domain=hugewinaffs")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å–ª–æ–≤–∏—è–º", callback_data="menu_conditions")]
            ]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "menu_contacts":
            text = (
                "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
                "–ú—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏ –∏ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å ‚Äî –≤ –ª—é–±–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!\n\n"
                "üïí –†–∞–±–æ—Ç–∞–µ–º 24/7\n"
                "–í–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ.\n\n"
                "üë®‚Äçüíº –í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã:\n"
                "‚Ä¢ @makswincraftüöÄ\n"
                "‚Ä¢ @dosiTG üíº\n"
                "‚Ä¢ @hugewinaffsüåü\n\n"
                "–ü–∏—à–∏—Ç–µ —Å–º–µ–ª–æ ‚Äî –º—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –¥–æ–ª–≥–æ–µ –∏ –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!"
            )
            keyboard = [
                [InlineKeyboardButton("üöÄ –ù–∞–ø–∏—Å–∞—Ç—å @makswincraft", url="https://t.me/makswincraft")],
                [InlineKeyboardButton("üíº –ù–∞–ø–∏—Å–∞—Ç—å @dosiTG", url="https://t.me/dosiTG")],
                [InlineKeyboardButton("üåü –ù–∞–ø–∏—Å–∞—Ç—å @hugewinaffs", url="https://t.me/hugewinaffs")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "menu_materials":
            text = "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
            keyboard = [
                [InlineKeyboardButton("üîó –õ–µ–Ω–¥–∏–Ω–≥–∏", callback_data="materials_landings")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "materials_landings":
            text = "üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–Ω–¥–∏–Ω–≥–∏ –∏ –¥–µ–º–æ-–∏–≥—Ä—ã"
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è (EN)", url="https://wincraft.casino/")],
                [InlineKeyboardButton("üá´üá∑ –ì–ª–∞–≤–Ω–∞—è (FR)", url="https://www.wincraft.casino/fr")],
                [InlineKeyboardButton("üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", url="https://wincraft.casino/?modal=signup")],
                [InlineKeyboardButton("üé∞ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ—Ç—ã", url="https://wincraft.casino/categories/games/popular")],
                [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ / –ë–æ–Ω—É—Å—ã", url="https://wincraft.casino/promotions")],
                [InlineKeyboardButton("üé° Wheel of Fortune", url="https://wincraft.casino/wheel-of-fortune")],
                [InlineKeyboardButton("üëß Wheel of Fortune (Girl)", url="https://wincraft.casino/wheel-of-fortune-girl")],
                [InlineKeyboardButton("üéÆ –î–µ–º–æ-–∏–≥—Ä—ã", callback_data="landings_demos")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º", callback_data="menu_materials")]
            ]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "landings_demos":
            text = "üéÆ –î–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤"
            keyboard = [
                [InlineKeyboardButton("üìñ Book of Dead", url="https://wincraft.casino/casino/games/12406?demo=true")],
                [InlineKeyboardButton("‚õ∞Ô∏è Gates of Olympus", url="https://wincraft.casino/casino/games/20502?demo=true")],
                [InlineKeyboardButton("‚öîÔ∏è Zeus vs Hades", url="https://wincraft.casino/casino/games/14475?demo=true")],
                [InlineKeyboardButton("üè° The Dog House", url="https://wincraft.casino/casino/games/9535?demo=true")],
                [InlineKeyboardButton("üç¨ Sweet Bonanza", url="https://wincraft.casino/casino/games/20504?demo=true")],
                [InlineKeyboardButton("‚úã Hand of Midas", url="https://wincraft.casino/casino/games/20709?demo=true")],
                [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ª–µ–Ω–¥–∏–Ω–≥–∞–º", callback_data="materials_landings")]
            ]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "menu_faq":
            text = (
                "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "01. –ó–∞ –∫–∞–∫–∏–µ –ª–∏–¥—ã –≤—ã –ø–ª–∞—Ç–∏—Ç–µ?\n"
                "‚Äî Motivated-—Ç—Ä–∞—Ñ–∏–∫\n"
                "‚Äî –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã (–æ–¥–∏–Ω ID/IP/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚Üí –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π)\n"
                "‚Äî –õ–∏–¥—ã —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–æ–π (–≤—ã—Å–æ–∫–∞—è —Ä–µ–≥–∞, –Ω–æ –Ω–µ—Ç –¥–µ–ø–æ–∑–∏—Ç–æ–≤)\n\n"
                "02. –û—Ü–µ–Ω–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ ‚Äî –≤ –ø–æ—Ç–æ–∫–µ –∏–ª–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º?\n"
                "‚Äî –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ. –ï—Å–ª–∏ –∏–∑ 20 ‚Äî 12 —Å–¥–µ–ª–∞–ª–∏ FTD, –æ–ø–ª–∞—Ç–∏–º –∑–∞ 12.\n\n"
                "03. –ï—Å—Ç—å –ª–∏ —Ö–æ–ª–¥ –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤?\n"
                "‚Äî –ù–µ—Ç. –í—Å–µ FTD, —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –¥–æ –∫–æ–Ω—Ü–∞ –æ—Ç—á—ë—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –æ–ø–ª–∞—á–∏–≤–∞—é—Ç—Å—è.\n\n"
                "04. –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –∫–ª–∏–∫–∞ –¥–æ –¥–µ–ø–æ–∑–∏—Ç–∞?\n"
                "‚Äî –ú–∞–∫—Å–∏–º—É–º 30 –¥–Ω–µ–π. –ï—Å–ª–∏ –¥–µ–ø–æ–∑–∏—Ç –≤ —ç—Ç–æ—Ç —Å—Ä–æ–∫ ‚Äî –ª–∏–¥ –≤–∞–ª–∏–¥–Ω—ã–π.\n\n"
                "05. –°—Ä–æ–∫–∏ —Å–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–ª–∞—Ç?\n"
                "‚Äî –°–≤–µ—Ä–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞, –≤—ã–ø–ª–∞—Ç–∞ ‚Äî –¥–æ 10-–≥–æ —á–∏—Å–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.\n"
                "‚Äî –ù–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–∞—Ö ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã –≤—ã–ø–ª–∞—Ç—ã 2‚Äì3 —Ä–∞–∑–∞ –≤ –º–µ—Å—è—Ü.\n\n"
                "06. –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞–ø—ã?\n"
                "‚Äî 10‚Äì20 FTD –Ω–∞ —Ç–µ—Å—Ç. –î–∞–ª–µ–µ ‚Äî –¥–æ 100 FTD. –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ ‚Äî –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                "07. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã?\n"
                "‚Äî 500 USD.\n\n"
                "08. –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã?\n"
                "‚Äî USDT / USDC. –ò–Ω–≤–æ–π—Å, KYC, AML ‚Äî –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
                "09. –ó–∞–¥–µ—Ä–∂–∫–∞ postback?\n"
                "‚Äî –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è 24/7 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
                "10. –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞?\n"
                "‚Äî CR –∫–ª–∏–∫ ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / FTD\n"
                "‚Äî –î–æ–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–µ—Ç–µ–Ω—à–Ω\n"
                "‚Äî –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–æ–≤\n"
                "‚Äî –ò—Å—Ç–æ—á–Ω–∏–∫–∏, –≥–µ–æ, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ª–∏–≤–æ–≤\n\n"
                "11. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ, –¥–µ–ø–æ–∑–∏—Ç ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º?\n"
                "‚Äî FTD –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø–µ—Ä–∏–æ–¥ –¥–µ–ø–æ–∑–∏—Ç–∞ (–≤ —Ä–∞–º–∫–∞—Ö 30 –¥–Ω–µ–π) –∏ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è.\n\n"
                "12. –ö–∞–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ª–∏–≤?\n"
                "‚Äî –¢–æ–ª—å–∫–æ –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–ª–∏–≤ ‚Äî –æ–ø–ª–∞—á–∏–≤–∞–µ–º.\n\n"
                "13. –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π?\n"
                "‚Äî RetDep ‚â•30% –æ—Ç FTD\n"
                "‚Äî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ ‚Äî x2‚Äìx2.5 –æ—Ç –º–∏–Ω. –¥–µ–ø–æ–∑–∏—Ç–∞\n\n"
                "16. KPI –Ω–∞ —Ç–µ—Å—Ç–µ?\n"
                "‚Äî –ù–∞ —Ç–µ—Å—Ç–µ KPI –Ω–µ –±–ª–æ–∫–∏—Ä—É—é—â–∏–µ. –û—Ä–∏–µ–Ω—Ç–∏—Ä—ã:\n"
                "  ‚Ä¢ CR –∫–ª–∏–∫ ‚Üí —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 20‚Äì30%\n"
                "  ‚Ä¢ CR —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –¥–µ–ø–æ–∑–∏—Ç: 5‚Äì10%\n"
                "  ‚Ä¢ Retention Day 7: –æ—Ç 25%\n"
                "‚Äî –û–ø–ª–∞—Ç–∞ –ø–æ –≤–∞–ª–∏–¥–Ω—ã–º FTD ‚Äî –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ.\n\n"
                "17. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –ª–∏ –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤ –∏ PPS-–±—Ä–µ–Ω–¥?\n"
                "‚Äî PPC, SEO, Facebook ‚Äî –¥–∞. –ò–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä—ã –∏ PPS-–±—Ä–µ–Ω–¥ ‚Äî –ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é.\n\n"
                "18. Hard –∏ Soft KPI?\n"
                "‚Äî Soft: CR —Ä–µ–≥–∞ 20‚Äì30%, CR FTD 5‚Äì10%, Ret7 >25%\n"
                "‚Äî Hard: RetDep >30%, ARPU ‚â•x2 –æ—Ç –º–∏–Ω. –¥–µ–ø–∞, ROI –Ω–∞ D7/D14\n\n"
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π:\n"
                "@makswincraft | @dosiTG | @hugewinaffs"
            )
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "stats_30":
            text = ("<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π</b>\n\n"
                    "üìÜ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è 1-–≥–æ –∏ 15-–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.\n\n"
                    "üñºÔ∏è –°–∫–æ—Ä–æ: –≥—Ä–∞—Ñ–∏–∫–∏ Click2Reg –∏ Reg2Dep!")
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        elif data == "stats_7":
            text = ("<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n"
                    "üìÜ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º.\n\n"
                    "üñºÔ∏è –°–∫–æ—Ä–æ: –Ω–µ–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–π!")
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ================== –ê–î–ú–ò–ù-–ú–ï–ù–Æ ==================

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    keyboard = [
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin_broadcast_users")],
        [InlineKeyboardButton("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º", callback_data="admin_broadcast_groups")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_admin")],
        [InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ]
    await update.message.reply_text("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if not is_admin(user_id):
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    if data == "admin_close":
        await query.edit_message_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.")
    elif data == "admin_broadcast_users":
        context.user_data['admin_action'] = 'broadcast_users'
        await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    elif data == "admin_broadcast_groups":
        context.user_data['admin_action'] = 'broadcast_groups'
        await query.edit_message_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º.")
    elif data == "admin_stats":
        await query.edit_message_text("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≤–µ–±-–ø–∞–Ω–µ–ª–∏.")
    elif data == "admin_add_admin":
        context.user_data['admin_action'] = 'add_admin'
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    else:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def handle_admin_action_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        return

    action = context.user_data.get('admin_action')
    message = update.message

    if action == 'broadcast_users':
        users = get_all_users()
        success = errors = 0
        for uid in users:
            try:
                if message.text:
                    await context.bot.send_message(chat_id=uid, text=message.text, parse_mode="HTML")
                elif message.photo:
                    await context.bot.send_photo(chat_id=uid, photo=message.photo[-1].file_id, caption=message.caption)
                elif message.document:
                    await context.bot.send_document(chat_id=uid, document=message.document.file_id, caption=message.caption)
                else:
                    await context.bot.copy_message(chat_id=uid, from_chat_id=message.chat_id, message_id=message.message_id)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                errors += 1
        await message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {errors}")
        context.user_data.pop('admin_action', None)

    elif action == 'broadcast_groups':
        groups = get_all_groups()
        if not groups:
            await message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
            return
        success = errors = 0
        for gid in groups:
            try:
                await context.bot.copy_message(chat_id=gid, from_chat_id=message.chat_id, message_id=message.message_id)
                success += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {gid}: {e}")
                errors += 1
        await message.reply_text(f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –≥—Ä—É–ø–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {errors}")
        context.user_data.pop('admin_action', None)

    elif action == 'add_admin':
        try:
            new_admin_id = int(message.text.strip())
            add_admin_to_db(new_admin_id)
            ADMIN_IDS.add(new_admin_id)
            await message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã!")
        except ValueError:
            await message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.")
        context.user_data.pop('admin_action', None)

# ================== –ì–†–£–ü–ü–´ ==================

async def handle_group_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.new_chat_members:
        for member in update.message.new_chat_members:
            if member.id == context.bot.id:
                chat = update.effective_chat
                add_group_to_db(chat.id, chat.title or f"Group {chat.id}")
                await update.message.reply_text("ü§ñ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

# ================== –ó–ê–ü–£–°–ö ==================

def main():
    init_db()
    load_admins_from_db()

    application = Application.builder().token(BOT_TOKEN).build()

    # 1. –°–Ω–∞—á–∞–ª–∞ ‚Äî –∫–æ–º–∞–Ω–¥—ã (–æ–Ω–∏ –∏–º–µ—é—Ç –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))

    # 2. –ü–æ—Ç–æ–º ‚Äî callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(admin_callback_handler, pattern="^admin_"))
    application.add_handler(CallbackQueryHandler(handle_menu, pattern="^(?!admin_).*$"))

    # 3. –ò —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ "–æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    application.add_handler(MessageHandler(
        filters.ChatType.PRIVATE & filters.User(user_id=list(ADMIN_IDS) if ADMIN_IDS else [INITIAL_ADMIN_ID]),
        handle_admin_action_message
    ))

    # –ì—Ä—É–ø–ø—ã
    application.add_handler(MessageHandler(
        filters.ChatType.GROUP | filters.ChatType.SUPERGROUP,
        handle_group_message
    ))

    application.run_polling()

if __name__ == "__main__":
    main()