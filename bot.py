import logging
import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = {123456789}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
user_db = set()

# ================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_db.add(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é
    keyboard = [[KeyboardButton("/start")]]
    reply_markup = ReplyKeyboardMarkup(
        keyboard, 
        resize_keyboard=True,
        one_time_keyboard=False
    )
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        reply_markup=reply_markup
    )
    
    await show_main_menu(update, user)

async def show_main_menu(update, user=None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    if user is None:
        user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("–û –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ", callback_data="menu_about")],
        [InlineKeyboardButton("–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è", callback_data="menu_tariffs")],
        [InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", callback_data="menu_contacts")],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="menu_materials")],
        [InlineKeyboardButton("FAQ", callback_data="menu_faq")],
        [
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 30 –¥–Ω–µ–π", callback_data="stats_30"),
            InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 7 –¥–Ω–µ–π", callback_data="stats_7")
        ],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if hasattr(update, 'message'):
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=reply_markup
        )
    else:
        await update.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
            reply_markup=reply_markup
        )

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "main_menu":
        await show_main_menu(query, query.from_user)
        return

    elif data == "menu_about":
        text = ("<b>–û –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
                "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏ —è—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "menu_tariffs":
        text = ("<b>–¢–∞—Ä–∏—Ñ—ã –∏ —É—Å–ª–æ–≤–∏—è</b>\n\n"
                "‚Ä¢ <b>–¢–∞—Ä–∏—Ñ –°—Ç–∞—Ä—Ç</b> - –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n"
                "‚Ä¢ <b>–¢–∞—Ä–∏—Ñ –ü—Ä–æ—Ñ–∏</b> - 1000‚ÇΩ/–º–µ—Å\n"
                "‚Ä¢ <b>–¢–∞—Ä–∏—Ñ –ë–∏–∑–Ω–µ—Å</b> - 3000‚ÇΩ/–º–µ—Å")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "menu_contacts":
        text = ("<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
                "üìß Email: support@example.com\n"
                "üë• Telegram: @support_username\n"
                "üåê –°–∞–π—Ç: example.com")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "menu_materials":
        text = "<b>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:"
        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è", url="https://example.com/presentation.pdf")],
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://example.com/guide.pdf")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "menu_faq":
        text = ("<b>FAQ</b>\n\n"
                "‚ùì <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É?</b>\n"
                "üëâ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ\n\n"
                "‚ùì <b>–ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é?</b>\n"
                "üëâ –í —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "stats_30":
        text = ("<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π</b>\n\n"
                "üìà –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 150\n"
                "üíº –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 45\n"
                "üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: 500,000‚ÇΩ")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "stats_7":
        text = ("<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π</b>\n\n"
                "üìà –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 35\n"
                "üíº –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 12\n"
                "üí∞ –û–±—â–∏–π –æ–±–æ—Ä–æ—Ç: 120,000‚ÇΩ")
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        await query.edit_message_text(text=text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# ================== –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–û–ù–ê–õ ==================

def is_admin(user_id: int):
    return user_id in ADMIN_IDS

async def admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not is_admin(user_id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        new_admin_id = int(context.args[0])
        ADMIN_IDS.add(new_admin_id)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—ã.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or not is_admin(update.effective_user.id):
        return
    await update.message.reply_text("–û–ö! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")

async def handle_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.id != ADMIN_CHAT_ID or not is_admin(update.effective_user.id):
        return

    message = update.message
    success = 0
    errors = 0
    
    for user_id in user_db:
        try:
            if message.text:
                await context.bot.send_message(chat_id=user_id, text=message.text, parse_mode="HTML")
            elif message.photo:
                await context.bot.send_photo(chat_id=user_id, photo=message.photo[-1].file_id, caption=message.caption)
            elif message.document:
                await context.bot.send_document(chat_id=user_id, document=message.document.file_id, caption=message.caption)
            else:
                await context.bot.copy_message(chat_id=user_id, from_chat_id=ADMIN_CHAT_ID, message_id=message.message_id)
            success += 1
        except Exception as e:
            errors += 1

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–£—Å–ø–µ—à–Ω–æ: {success}\n–û—à–∏–±–æ–∫: {errors}")

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_menu))
    application.add_handler(CommandHandler("add_admin", admin_add))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(MessageHandler(filters.Chat(ADMIN_CHAT_ID) & filters.ALL, handle_admin_message))

    application.run_polling()

if __name__ == "__main__":
    main()